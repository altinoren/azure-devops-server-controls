/**
 * ---------------------------------------------------------
 * Generated file, DO NOT EDIT
 * ---------------------------------------------------------
 *
 * See following wiki page for instructions on how to regenerate:
 *   https://vsowiki.com/index.php?title=Rest_Client_Generation
 *
 * Configuration file:
 *   Search\Client\WebApiLegacy\ClientGeneratorConfigs\genclient.json
 */

"use strict";

import Code_Contracts = require("Search/Scenarios/WebApi/Code.Contracts");
import WorkItem_Contracts = require("Search/Scenarios/WebApi/Workitem.Contracts");
import Search_Shared_Legacy_Contracts = require("Search/Scripts/Generated/Search.SharedLegacy.Contracts");
import VSS_Service = require("VSS/Service");
import VSS_WebApi = require("VSS/WebApi/RestClient");

/**
 * Temporarily adding this rest client till our controllers are genclient compliant. This is a copy of the one which is autogenerated.
 */
export class CommonMethods2To4_1 extends VSS_WebApi.VssHttpClient {

    public static serviceInstanceId = "00000010-0000-8888-8000-000000000000";
    protected codeAdvancedQueryResultsApiVersion: string;
    protected codeQueryResultsApiVersion: string;
    protected resultsCountApiVersion: string;
    protected tenantCodeQueryResultsApiVersion: string;
    protected workItemQueryResultsApiVersion: string;

    constructor(rootRequestPath: string, options?: VSS_WebApi.IVssHttpClientOptions) {
        super(rootRequestPath, options);
    }

    /**
     * [Preview API] Provides a set of results which match the posted query.
     *
     * @param {WorkItem_Contracts.WorkItemSearchRequest} query - The search query.
     * @return IPromise<Search_Shared_Legacy_Contracts.EntitySearchResponseWithActivityId>
     */
    public postWorkItemQuery(
        query: WorkItem_Contracts.WorkItemSearchRequest,
        project?: string
    ): IPromise<Search_Shared_Legacy_Contracts.EntitySearchResponseWithActivityId> {

        return this._beginRequest<[any, string, JQueryXHR]>({
            httpMethod: "POST",
            area: "search",
            locationId: "b635b830-2e4b-46e2-ba87-030d42c7a6aa",
            resource: "workItemQueryResults",
            routeTemplate: "{project}/_apis/{area}/{resource}",
            responseType: Search_Shared_Legacy_Contracts.TypeInfo.EntitySearchResponse,
            apiVersion: this.workItemQueryResultsApiVersion,
            routeValues: {
                project: project
            },
            data: query
        }, true).then(([data, textStatus, jqXHR]) => {
            return {
                response: data,
                activityId: [jqXHR.getResponseHeader("activityid")]
            };
        });
    }

    /**
     * [Preview API] Provides a set of results which match the posted query.
     *
     * @param {Code_Contracts.SearchQuery} query - The search query.
     * @return IPromise<Search_Shared_Legacy_Contracts.EntitySearchResponseWithActivityId>
     */
    public postCodeQuery(
        query: Code_Contracts.SearchQuery,
        project?: string
    ): IPromise<Search_Shared_Legacy_Contracts.EntitySearchResponseWithActivityId> {

        return this._beginRequest<[any, string, JQueryXHR]>({
            httpMethod: "POST",
            area: "search",
            locationId: "948ca594-7923-4834-b721-7f3875f51e6c",
            resource: "codeQueryResults",
            routeTemplate: "{project}/_apis/{area}/{resource}",
            responseType: Search_Shared_Legacy_Contracts.TypeInfo.EntitySearchResponse,
            routeValues: {
                project: project
            },
            apiVersion: this.codeQueryResultsApiVersion,
            data: query
        }, true).then(([data, textStatus, jqXHR]) => {
            return {
                response: data,
                activityId: [jqXHR.getResponseHeader("activityid")]
            };
        });
    }

    /**
     * [Preview API] Provides a set of results which match the posted advanced query.
     *
     * @param {Code_Contracts.SearchQuery} query - The advanced search query.
     * @return IPromise<Search_Shared_Legacy_Contracts.EntitySearchResponseWithActivityId>
     */
    public postAdvancedCodeQuery(
        query: Code_Contracts.SearchQuery,
        project?: string
    ): IPromise<Search_Shared_Legacy_Contracts.EntitySearchResponseWithActivityId> {

        return this._beginRequest<[any, string, JQueryXHR]>({
            httpMethod: "POST",
            area: "search",
            locationId: "b0d4a14a-520f-40d2-a7da-281a055addcc",
            resource: "codeAdvancedQueryResults",
            routeTemplate: "{project}/_apis/{area}/{resource}",
            responseType: Search_Shared_Legacy_Contracts.TypeInfo.EntitySearchResponse,
            routeValues: {
                project: project
            },
            apiVersion: this.codeAdvancedQueryResultsApiVersion,
            data: query
        }, true).then(([data, textStatus, jqXHR]) => {
            return {
                response: data,
                activityId: [jqXHR.getResponseHeader("activityid")]
            };
        });
    }

    /**
     * [Preview API] Provides a set of results which match the posted query.
     *
     * @param {Contracts.SearchQuery} query - The search query.
     * @return IPromise<Contracts.CodeQueryResponse>
     */
    public postTenantCodeQuery(
        query: Code_Contracts.SearchQuery
    ): IPromise<Code_Contracts.CodeQueryResponse> {

        return this._beginRequest<Code_Contracts.CodeQueryResponse>({
            httpMethod: "POST",
            area: "search",
            locationId: "21a1f7f9-8db1-4f7e-8cfb-4ae78e972088",
            resource: "tenantCodeQueryResults",
            routeTemplate: "_apis/{area}/{resource}",
            responseType: Code_Contracts.TypeInfo.CodeQueryResponse,
            apiVersion: this.tenantCodeQueryResultsApiVersion,
            data: query
        });
    }
    
    /**
     * [Preview API] Provides an approximate count of results for posted query.
     *
     * @param {Search_Shared_Legacy_Contracts.CountRequest} query - The search query.
     * @param {string} entityType - The entity for which count query is done.
     * @param {string} project - Project ID or project name
     * @return IPromise<Search_Shared_Legacy_Contracts.CountResponse>
     */
    public resultsCount(
        query: Search_Shared_Legacy_Contracts.CountRequest,
        entityType: string,
        project?: string
        ): IPromise<Search_Shared_Legacy_Contracts.CountResponse> {

        const queryValues: any = {
            entityType: entityType
        };

        return this._beginRequest<Search_Shared_Legacy_Contracts.CountResponse>({
            httpMethod: "POST",
            area: "search",
            locationId: "d26ef242-f129-40ed-b9db-b31a792065e0",
            resource: "resultsCount",
            routeTemplate: "{project}/_apis/{area}/{resource}",
            responseType: Search_Shared_Legacy_Contracts.TypeInfo.CountResponse,
            routeValues: {
                project: project
            },
            queryParams: queryValues,
            apiVersion: this.resultsCountApiVersion,
            data: query
        });
    }
}

/**
 * @exemptedapi
 */
export class SearchHttpClient4_1 extends CommonMethods2To4_1 {

    constructor(rootRequestPath: string, options?: VSS_WebApi.IVssHttpClientOptions) {
        super(rootRequestPath, options);
        this.codeAdvancedQueryResultsApiVersion =
            this.codeQueryResultsApiVersion =
            this.resultsCountApiVersion =
            this.tenantCodeQueryResultsApiVersion =
            this.workItemQueryResultsApiVersion = "4.1-preview.1";
    }
}

/**
 * @exemptedapi
 */
export class SearchHttpClient4 extends CommonMethods2To4_1 {

    constructor(rootRequestPath: string, options?: VSS_WebApi.IVssHttpClientOptions) {
        super(rootRequestPath, options);
        this.codeAdvancedQueryResultsApiVersion =
            this.codeQueryResultsApiVersion =
            this.resultsCountApiVersion =
            this.tenantCodeQueryResultsApiVersion =
            this.workItemQueryResultsApiVersion = "4.0-preview.1";
    }
}

/**
 * @exemptedapi
 */
export class SearchHttpClient3_2 extends CommonMethods2To4_1 {

    constructor(rootRequestPath: string, options?: VSS_WebApi.IVssHttpClientOptions) {
        super(rootRequestPath, options);
        this.codeAdvancedQueryResultsApiVersion =
            this.codeQueryResultsApiVersion =
            this.resultsCountApiVersion =
            this.tenantCodeQueryResultsApiVersion =
            this.workItemQueryResultsApiVersion = "3.2-preview.1";
    }
}

/**
 * @exemptedapi
 */
export class SearchHttpClient3_1 extends CommonMethods2To4_1 {

    constructor(rootRequestPath: string, options?: VSS_WebApi.IVssHttpClientOptions) {
        super(rootRequestPath, options);
        this.codeAdvancedQueryResultsApiVersion =
            this.codeQueryResultsApiVersion =
            this.resultsCountApiVersion =
            this.tenantCodeQueryResultsApiVersion =
            this.workItemQueryResultsApiVersion = "3.1-preview.1";
    }
}

/**
 * @exemptedapi
 */
export class SearchHttpClient3 extends CommonMethods2To4_1 {

    constructor(rootRequestPath: string, options?: VSS_WebApi.IVssHttpClientOptions) {
        super(rootRequestPath, options);
        this.codeAdvancedQueryResultsApiVersion =
            this.codeQueryResultsApiVersion =
            this.resultsCountApiVersion =
            this.tenantCodeQueryResultsApiVersion = 
            this.workItemQueryResultsApiVersion = "3.0-preview.1";
    }
}

/**
 * @exemptedapi
 */
export class SearchHttpClient2_3 extends CommonMethods2To4_1 {

    constructor(rootRequestPath: string, options?: VSS_WebApi.IVssHttpClientOptions) {
        super(rootRequestPath, options);
        this.codeAdvancedQueryResultsApiVersion =
            this.codeQueryResultsApiVersion =
            this.resultsCountApiVersion =
            this.tenantCodeQueryResultsApiVersion =
            this.workItemQueryResultsApiVersion = "2.3-preview.1";
    }
}

/**
 * @exemptedapi
 */
export class SearchHttpClient2_2 extends CommonMethods2To4_1 {

    constructor(rootRequestPath: string, options?: VSS_WebApi.IVssHttpClientOptions) {
        super(rootRequestPath, options);
        this.codeAdvancedQueryResultsApiVersion =
            this.codeQueryResultsApiVersion =
            this.resultsCountApiVersion =
            this.tenantCodeQueryResultsApiVersion =
            this.workItemQueryResultsApiVersion = "2.2-preview.1";
    }
}

/**
 * @exemptedapi
 */
export class SearchHttpClient2_1 extends CommonMethods2To4_1 {

    constructor(rootRequestPath: string, options?: VSS_WebApi.IVssHttpClientOptions) {
        super(rootRequestPath, options);
        this.codeAdvancedQueryResultsApiVersion =
            this.codeQueryResultsApiVersion =
            this.resultsCountApiVersion =
            this.tenantCodeQueryResultsApiVersion =
            this.workItemQueryResultsApiVersion = "2.1-preview.1";
    }
}

/**
 * @exemptedapi
 */
export class SearchHttpClient2 extends CommonMethods2To4_1 {

    constructor(rootRequestPath: string, options?: VSS_WebApi.IVssHttpClientOptions) {
        super(rootRequestPath, options);
        this.codeAdvancedQueryResultsApiVersion =
            this.codeQueryResultsApiVersion =
            this.resultsCountApiVersion =
            this.tenantCodeQueryResultsApiVersion =
            this.workItemQueryResultsApiVersion = "2.0-preview.1";
    }
}

export class SearchHttpClient extends SearchHttpClient4_1 {
    constructor(rootRequestPath: string, options?: VSS_WebApi.IVssHttpClientOptions) {
        super(rootRequestPath, options);
    }
}

const clientMapping: { [id: string]: new (routeRequestPath: string) => VSS_WebApi.VssHttpClient; } = {
    "4.1": SearchHttpClient4_1,
    "4.0": SearchHttpClient4,
    "3.2": SearchHttpClient3_2,
    "3.1": SearchHttpClient3_1,
    "3.0": SearchHttpClient3,
    "2.3": SearchHttpClient2_3,
    "2.2": SearchHttpClient2_2,
    "2.1": SearchHttpClient2_1,
    "2.0": SearchHttpClient2
}

/**
 * Gets an http client targeting the latest released version of the APIs.
 *
 * @return SearchHttpClient4
 */
export function getClient(options?: VSS_WebApi.IVssHttpClientOptions): SearchHttpClient4 {
    if ((<any>window).VSS && (<any>window).VSS.VssSDKRestVersion && clientMapping[(<any>window).VSS.VssSDKRestVersion]) {
        return VSS_Service.getClient<SearchHttpClient4>(<any>(clientMapping[(<any>window).VSS.VssSDKRestVersion]), undefined, undefined, undefined, options);
    }
    else {
        return VSS_Service.getClient<SearchHttpClient4>(SearchHttpClient4, undefined, undefined, undefined, options);
    }
}
