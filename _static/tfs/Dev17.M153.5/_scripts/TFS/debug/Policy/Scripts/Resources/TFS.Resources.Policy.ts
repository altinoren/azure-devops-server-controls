export var PoliciesFor = "Policies for:";
export var EditPolicies = "Edit policies";
export var ProtectOneBranchText = "Protect this branch";
export var ProtectBranchFolderText = "Protect these branches";
export var ProtectBranchDetail1 = "Setting a Required policy will enforce the use of pull requests when updating the branch";
export var ProtectBranchDetail2 = "Setting a Required policy will prevent branch deletion";
export var ProtectBranchDetail3 = "Manage permissions for this branch on the {0}";
export var SecurityPage = "Security page";
export var Enabled = "Enabled";
export var Disabled = "Disabled";
export var PolicyDisabled = "Policy disabled";
export var Edit = "Edit";
export var View = "View";
export var Delete = "Delete";
export var Save = "Save";
export var Cancel = "Cancel";
export var Close = "Close";
export var SaveAll = "Save changes";
export var DiscardAll = "Discard changes";
export var SaveInProgress = "Saving your changes";
export var PathFilter = "Path filter";
export var PathFilterOptional = "Path filter (optional)";
export var NoFilterSet = "No filter set";
export var NoFilter = "No filter";
export var AddPath = "Add path";
export var Unknown = "Unknown";
export var LearnMore = "Learn more";
export var PolicyRequirement = "Policy requirement";
export var Requirement = "Requirement";
export var Required = "Required";
export var Optional = "Optional";
export var Never = "Never";
export var Trigger = "Trigger";
export var Automatic = "Automatic";
export var Manual = "Manual";
export var ShowAdvancedOptions = "Show advanced options";
export var DisplayName = "Display name";
export var CustomMessage = "Custom message";
export var Reviewers = "Reviewer(s)";
export var Expiration = "Expiration";
export var PolicyFallbackName = "Policy {0}";
export var SaveCancelSectionLabel = "Save or undo changes";
export var Dismiss = "Dismiss";
export var MultiscopePolicyMessageBarText = "Some policies have been configured for multiple branches using the REST API. These policies can only be edited using the policy REST API:";
export var PolicyWithIdAndType = "Policy {0} ({1})";
export var ParentPolicyMessageBarText = "There are policies set on parent folders for this branch that will also apply to this branch:";
export var BranchPageScreenshotAlt = "Screenshot of branches page";
export var ProtectWithBranchPoliciesText = "Protect your code with branch policies";
export var ProtectWithBranchPoliciesDetails = "Protect a branch by navigating to your branches page and selecting \"Branch policies\" from the context menu.";
export var LinkToBranchesPageText = "Go to branches";
export var DeletePolicyDialogTitle = "Confirm deletion";
export var DeleteDialogAreYouSure = "Are you sure you want to delete this policy?";
export var DeleteDialogNotAskingAgain = "This action cannot be undone.";
export var ApproverCountSectionLabel = "Approver count policy";
export var ApproverCountEnableText = "Require a minimum number of reviewers";
export var ApproverCountEnableDetail = "Require approval from a specified number of reviewers on pull requests.";
export var ApproverCountMinimumApproverCount = "Minimum number of reviewers";
export var ApproverCountCreatorVoteCounts = "Allow users to approve their own changes.";
export var ApproverCountAllowDownvotes = "Allow completion even if some reviewers vote “Waiting” or “Reject”.";
export var ApproverCountResetVotesOnSourceChanged = "Reset code reviewer votes when there are new changes.";
export var CommentRequirementsSectionLabel = "Comment requirements policy";
export var CommentRequirementsPolicyEnableText = "Check for comment resolution";
export var CommentRequirementsPolicyEnableDetail = "Check to see that all comments have been resolved on pull requests.";
export var CommentRequirementsRequiredDetail = "Block pull requests from being completed while any comments are active.";
export var CommentRequirementsgOptionalDetail = "Warn if any comments are active, but allow pull requests to be completed.";
export var MergeStrategySectionLabel = "Merge strategy policy";
export var MergeStrategyEnableText = "Enforce a merge strategy";
export var MergeStrategyEnableDetail = "Require a specific type of merge when pull requests are completed.";
export var MergeStrategyChoiceGroupLabel = "Required merge type";
export var MergeStrategyNeverSquashText = "No-fast-forward merge";
export var MergeStrategyNeverSquashDetail = "The source branch and all its commits will appear as a second parent to the merge commit.";
export var MergeStrategyAlwaysSquashText = "Squash merge";
export var MergeStrategyAlwaysSquashDetail = "Condense all the changes in a pull request into one commit with one parent.";
export var SquashMergeLearnMoreTitle = "Learn more about squash merges";
export var WorkItemLinkingSectionLabel = "Work item linking policy";
export var WorkItemLinkingEnableText = "Check for linked work items";
export var WorkItemLinkingEnableDetail = "Encourage traceability by checking for linked work items on pull requests.";
export var WorkItemLinkingIsBlocking = "Block pull request completion if there are no linked work items";
export var WorkItemLinkingRequiredDetail = "Block pull requests from being completed unless they have at least one linked work item.";
export var WorkItemLinkingOptionalDetail = "Warn if there are no linked work items, but allow pull requests to be completed.";
export var BuildSectionLabel = "Build policies";
export var BuildEnableText = "Build validation";
export var BuildEnableDetail = "Validate code by pre-merging and building pull request changes";
export var BuildListLabel = "Build policies";
export var BuildAddBuild = "Add build";
export var BuildExpiresStrict = "Strict expiration";
export var BuildExpiresAfterDays = "Expires after {0} days";
export var BuildExpiresAfterHrs = "Expires after {0} hours";
export var BuildExpiresAfterMins = "Expires after {0} minutes";
export var BuildExpiresAfter1Min = "Expires after 1 minute";
export var BuildExpiresNever = "Never expires";
export var NoBuildDefinitions = "No build pipelines were found";
export var BuildDefinitionsLoading = "Build pipelines are loading ({0} loaded)";
export var FilterBuildDefinitions = "Filter build pipelines";
export var NoMatches = "No matches";
export var EditBuildPolicyUnnamed = "Edit build policy";
export var EditBuildPolicyNamed = "Edit build: {0}";
export var AddBuildPolicy = "Add build policy";
export var BuildDefinition = "Build pipeline";
export var SelectBuildDefinition = "Select a build pipeline";
export var EditBuildRequiredDetail = "Build must succeed in order to complete pull requests.";
export var EditBuildOptionalDetail = "Build failure will not block completion of pull requests.";
export var BuildExpiration = "Build expiration";
export var BuildExpirationStrict = "Immediately when {0} is updated";
export var BuildExpirationWindow = "After {0} hours if {1} has been updated";
export var BuildTriggerAutomatic = "Automatic (whenever the source branch is updated)";
export var AutomaticReviewersSectionLabel = "Automatic reviewer policies";
export var AutomaticReviewersEnableText = "Automatically include code reviewers";
export var AutomaticReviewersEnableDetail = "Include specific users or groups in the code review based on which files changed.";
export var AutomaticReviewersListLabel = "Automatic reviewer policies";
export var ReviewerFacepileLabel = "Reviewers";
export var AddAutomaticReviewersPolicy = "Add automatic reviewers";
export var AutomaticReviewersPendingReviewerName = "Validating \u0027{0}\u0027...";
export var EditAutomaticReviewersPolicy = "Edit automatic reviewers";
export var EditAutomaticReviewersRequiredDetail = "All reviewers must approve to complete pull requests.";
export var EditAutomaticReviewersOptionalDetail = "Reviewers will be added automatically for configured paths, but approvals are not required to complete pull requests.";
export var AutomaticReviewersInvalidReviewerName = "\u0027{0}\u0027 does not have permission for this repository.";
export var PathsHelpTextHeader = "If a path filter is set, the policy will only apply when files which match the filter are changed. Leaving this field blank means that the policy will always apply.";
export var PathsHelpText1 = "You can specify absolute paths and wildcards";
export var PathsHelpText1ex = "Example: /WebApp/Models/Data.cs, /WebApp/*, or *.cs";
export var PathsHelpText2 = "You can specify multiple paths using “;” as a separator";
export var PathsHelpText2ex = "Example: /WebApp/Models/Data.cs;ClientApp/Models/Data.cs";
export var PathsHelpText3 = "Paths prefixed with “!” are excluded";
export var PathsHelpText3ex = "Example: /WebApp/*;!/WebApp/Tests/*";
export var PathsHelpText4 = "Order is significant";
export var NumberTextFieldNaN = "Enter a number.";
export var NumberTextFieldNotInteger = "Enter a whole number.";
export var NumberTextFieldTooLow = "Value must be at least {0}.";
export var NumberTextFieldTooHigh = "Value must not be more than {0}.";
export var AuthorizedAccount = "Authorized organization";
export var StatusPolicyAddText = "Add status policy";
export var StatusPolicyContextName = "Status name";
export var StatusPolicyDialogDetails = "Status policies are passing when a “succeeded” status is posted to the pull request.";
export var StatusPolicyDialogTitleAdd = "Add status policy";
export var StatusPolicyEnableDetail = "Require third party services to post successful status to complete pull requests.";
export var StatusPolicyEnableText = "Require approval from external services";
export var StatusPolicyExpiration = "Reset conditions";
export var StatusPolicyExpirationOnSourceUpdateText = "Reset status whenever there are new changes";
export var StatusPolicyListLabel = "External status policies";
export var StatusPolicyOptionalDetails = "A status of “failed” will not block completion of pull requests.";
export var StatusPolicyRequiredDetails = "A status of “succeeded” is needed to complete pull requests.";
export var StatusPolicySectionLabel = "External status policy";
export var StatusPolicyListExpirationOnSourceUpdate = "On source update";
export var StatusPolicyAuthorsLabel = "Status authors";
export var StatusPolicyDialogNoStatusesPosted = "No statuses posted yet";
export var StatusPolicyAuthoredAccount = "Authorized organization";
export var StatusPolicyAuthorNotRequired = "Any identity can post this status";
export var StatusPolicyAuthorRequiredStatusNotFound = "Cannot set authorized organization because no recent statuses with such genre and name found.";
export var AnyAccount = "Any organization";
export var DefaultDisplayName = "Default display name";
export var StatusPolicyDisabledReasonNoStatuses = "Post a status on a Pull Request to create a policy.";
export var StatusPolicyApplicability = "Policy applicability";
export var StatusPolicyApplyByDefault = "Apply by default";
export var StatusPolicyApplyByDefaultDescription = "Apply unless \"Not Applicable\" status is posted to the pull request.";
export var StatusPolicyApplyWhenStatusExists = "Conditional";
export var StatusPolicyApplyWhenStatusExistsDescription = "The policy is applied only after a status is posted to the pull request.";
export var StatusPolicyDialogStatus = "Status to check";
export var StatusPolicyDialogStatusInfo = "The following statuses have been posted to this repository recently. You may select existing status or specify a new one separating status genre and name by \u0027/\u0027.";
export var StatusPolicyDialogTitleEdit = "Edit status policy";
export var StatusPolicyAuthorInvalid = "\u0027{0}\u0027 does not have permission for this repository.";
export var StatusPolicyAuthorRequired = "Only the following identity can post this status";
export var AdvancedSettings = "Advanced";
export var StatusPolicyDialogStatusInfoCase1 = "You can set only status name without status genre (e.g \u0027linting-status\u0027).";
export var StatusPolicyDialogStatusInfoCase2 = "You can set status genre and name separating them by \u0027/\u0027 (e.g \u0027ci-service/linting-status\u0027, \u0027ci-service/build-status\u0027).";
export var StatusPolicyDialogStatusInfoCase3 = "When multiple \u0027/\u0027 symbols entered the entry will be split by last one. For example, for \u0027ci-service/static-analysis/linting-status\u0027 entry status genre will be set to \u0027ci-service/static-analysis\u0027 and status name to \u0027linting-status\u0027.";
export var StatusPolicyExpiratonOnSourceUpdateDescription = "This option requires that status is posted on pull request iterations. This option is best for policies that are tied to code (e.g. CI/CD, test, static analysis).";
export var StatusPolicyExpireOnSourceUpdateWarningText = "The reset status option limits status to iterations. Attempts to post status on the pull request instead of an iteration will fail.";
export var StatusPolicyDefaultDisplayNameInfoText = "Default display name for the policy will initially appear on the pull request page. It may be overwritten by the description of the latest posted status.";
export var Disable = "Disable";
export var Enable = "Enable";
export var EnableOrDisable = "Enable or disable";
export var PanelCloseButtonAriaLabel = "Close";
