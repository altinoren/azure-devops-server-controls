import * as React from "react";
import StringUtils = require("VSS/Utils/String");
import { WorkItemFieldNamespace } from "WorkCustomization/Scripts/Constants";
import { CoreFieldRefNames } from "Presentation/Scripts/TFS/Generated/TFS.WorkItemTracking.Constants";
import * as ProcessHttpClient from  "TFS/WorkItemTracking/ProcessRestClient";
import Resources = require("WorkCustomization/Scripts/Resources/TFS.Resources.WorkCustomization");
import * as Service from "VSS/Service";
import { FieldType } from "TFS/WorkItemTracking/Contracts";
import { FieldType as ProcessContractsFieldType } from "TFS/WorkItemTracking/ProcessContracts";
export namespace CommonUtils {
    export function NullFunction() { }
    export function NullPreventDefaultFunction(e: React.SyntheticEvent<any>) { e.preventDefault() }
    export function NullStopPropagationFunction(e: React.SyntheticEvent<any>) { e.stopPropagation() }

    export function toEmptyIfNull(value: string): string {
        return value == null ? "" : value;
    }

    export function isStringNullOrEmpty(value: string): boolean {
        return value == null || value === StringUtils.empty;
    }

    export function getClone<T>(object: any): T {
        return JSON.parse((JSON.stringify(object)));
    }

    export function getFieldTypeEnumAsArray(): ProcessContractsFieldType[] {
        let fieldTypeEnumKeys = Object.keys(ProcessContractsFieldType).map(k => ProcessContractsFieldType[k]);
        let allFieldTypes = fieldTypeEnumKeys.filter(v => typeof v === "number") as ProcessContractsFieldType[];
        return allFieldTypes;
    }
}

export namespace ValidationUtils {
    export function entityNameValid(name: string): boolean {
        return !(name == null || name.trim() === "");
    }
}

export namespace ProcessUtils {
    export function processCustomized(parentProcessTypeId: string): boolean {
        return !(parentProcessTypeId == null
            || parentProcessTypeId === ""
            || parentProcessTypeId === StringUtils.EmptyGuidString);
    }

    // This method is inorder to use  WorkItemTrackingProcessHttpClient5 and the newly introduced process picklist api of version 5.0-preview.1 
    // Currently the the default workitemtrackingprocesshttpclient is version 4_1 as it is the released version.
    // Note that processrestclient.ts generated by genclient, only has httpclient of released version which is 4.1 in this case.  
    // So this is workaround to use WorkItemTrackingProcessHttpclient5. 
    export function getProcessClient(): ProcessHttpClient.WorkItemTrackingProcessHttpClient5 {
        return Service.getClient(ProcessHttpClient.WorkItemTrackingProcessHttpClient5);
    }
}

export namespace FieldUtils {
    export function isSystemField(referenceName: string): boolean {
        return StringUtils.startsWith(referenceName, WorkItemFieldNamespace.SystemFieldNameSpace);
    }

    export function isMicrosoftInternalField(referenceName: string): boolean {
        return StringUtils.startsWith(referenceName, WorkItemFieldNamespace.MicrosoftInternalNamespace);
    }

    export function isCustomField(referenceName: string): boolean {
        return !isSystemField(referenceName) && !isMicrosoftInternalField(referenceName);
    }

    export function isStateField(referenceName:string):boolean{
        return StringUtils.equals(referenceName,CoreFieldRefNames.State);
    }

    export function isWorkItemTypeField(referenceName: string): boolean {
        return StringUtils.equals(referenceName, CoreFieldRefNames.WorkItemType);
    }

    export function isCoreField(referenceName: string): boolean {
        // lazy init dictionary for core fields to avoid multiple iterations
        if (!coreFieldsDictionary) {
            coreFieldsDictionary = {};
            for (let coreRefName in CoreFieldRefNames) {
                coreFieldsDictionary[CoreFieldRefNames[coreRefName]] = true;
            }
        }

        return coreFieldsDictionary[referenceName] ? true : false;
    }

    export function getFriendlyFieldTypeName(type: FieldType, isPicklist: boolean, isIdentity?: boolean): string {
        if (isIdentity) {
            return Resources.Identity;
        }
        else if (isPicklist) {
            return picklistFieldTypeMap[type];
        }
        else {
            return fieldTypeMap[type];
        }
    }

    var coreFieldsDictionary: IDictionaryStringTo<boolean>;

    var fieldTypeMap: IDictionaryStringTo<string> = {
        [FieldType.Boolean]: Resources.Boolean,
        [FieldType.DateTime]: Resources.DateTime,
        [FieldType.Double]: Resources.Decimal,
        [FieldType.Html]: Resources.HTML,
        [FieldType.Identity]: Resources.Identity,
        [FieldType.Integer]: Resources.Integer,
        [FieldType.PlainText]: Resources.PlainText,
        [FieldType.String]: Resources.String,
        [FieldType.TreePath]: Resources.TreePath,
        [FieldType.History]: Resources.History
    };

    var picklistFieldTypeMap: IDictionaryStringTo<string> = {
        [FieldType.Double]: Resources.PicklistDouble,
        [FieldType.Integer]: Resources.PicklistInteger,
        [FieldType.String]: Resources.PicklistString
    };
}

