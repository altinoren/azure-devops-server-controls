/**
 * ---------------------------------------------------------
 * Generated file, DO NOT EDIT
 * ---------------------------------------------------------
 *
 * See following wiki page for instructions on how to regenerate:
 *   https://aka.ms/azure-devops-client-generation
 *
 * Configuration file:
 *   vssf\client\webapi\httpclients\clientgeneratorconfigs\user.genclient.json
 */

"use strict";

/**
 * Host accessed by a user.
 */
export interface AccessedHost {
    accessTime: Date;
    hostId: string;
}

/**
 * Request to update a user's accessed hosts.
 */
export interface AccessedHostsParameters {
    accessedHosts: AccessedHost[];
    userDescriptor: string;
}

/**
 * The user's picture.
 */
export interface Avatar {
    /**
     * The raw avatar image data, in either jpg or png format.
     */
    image: number[];
    /**
     * True if the avatar is dynamically generated, false if user-provided.
     */
    isAutoGenerated: boolean;
    /**
     * The date/time at which the avatar was last modified.
     */
    lastModified: Date;
    /**
     * The size of the avatar, e.g. small, medium, or large.
     */
    size: AvatarSize;
}

/**
 * The avatar size, as scaled to one of several predefined settings.
 */
export enum AvatarSize {
    /**
     * 34 x 34 pixels
     */
    Small = 0,
    /**
     * 44 x 44 pixels
     */
    Medium = 1,
    /**
     * 220 x 220 pixels
     */
    Large = 2
}

/**
 * Used at the time of initial user creation.
 */
export interface CreateUserParameters {
    /**
     * The user's country of residence or association.
     */
    country: string;
    data: { [key: string] : any; };
    /**
     * The user's unique identifier, and the primary means by which the user is referenced.
     */
    descriptor: string;
    /**
     * The user's name, as displayed throughout the product.
     */
    displayName: string;
    /**
     * The user's preferred email address.
     */
    mail: string;
    /**
     * Identifier to mark whether user's profile is pending
     */
    pendingProfileCreation: boolean;
    /**
     * The region in which the user resides or is associated.
     */
    region: string;
}

export interface MailConfirmationParameters {
    /**
     * The unique code that proves ownership of the email address.
     */
    challengeCode: string;
    /**
     * The email address to be confirmed.
     */
    mailAddress: string;
}

/**
 * Used for updating a user's attributes.
 */
export interface SetUserAttributeParameters {
    /**
     * The date/time at which the attribute was last modified.
     */
    lastModified: Date;
    /**
     * The unique group-prefixed name of the attribute, e.g. "TFS.TimeZone".
     */
    name: string;
    /**
     * The attribute's revision, for change tracking.
     */
    revision: number;
    /**
     * The value of the attribute.
     */
    value: string;
}

/**
 * Used for updating a user's data.
 */
export interface UpdateUserParameters {
    /**
     * The collection of properties to set.  See "User" for valid fields.
     */
    properties: any;
}

export interface User {
    /**
     * A short blurb of "about me"-style text.
     */
    bio: string;
    /**
     * A link to an external blog.
     */
    blog: string;
    /**
     * The company at which the user is employed.
     */
    company: string;
    /**
     * The user's country of residence or association.
     */
    country: string;
    /**
     * The date the user was created in the system
     */
    dateCreated: Date;
    /**
     * The user's unique identifier, and the primary means by which the user is referenced.
     */
    descriptor: string;
    /**
     * The user's name, as displayed throughout the product.
     */
    displayName: string;
    /**
     * The date/time at which the user data was last modified.
     */
    lastModified: Date;
    /**
     * A set of readonly links for obtaining more info about the user.
     */
    links: any;
    /**
     * The user's preferred email address.
     */
    mail: string;
    /**
     * The attribute's revision, for change tracking.
     */
    revision: number;
    /**
     * The status of the user
     */
    state: UserState;
    /**
     * The user's preferred email address which has not yet been confirmed.
     */
    unconfirmedMail: string;
    /**
     * The unique name of the user.
     */
    userName: string;
}

export interface UserAttribute {
    /**
     * The date/time at which the attribute was last modified.
     */
    lastModified: Date;
    /**
     * The unique group-prefixed name of the attribute, e.g. "TFS.TimeZone".
     */
    name: string;
    /**
     * The attribute's revision, for change tracking.
     */
    revision: number;
    /**
     * The value of the attribute.
     */
    value: string;
}

export interface UserAttributes {
    /**
     * Collection of attributes
     */
    attributes: UserAttribute[];
    /**
     * Opaque string to get the next chunk of results Server would return non-null string here if there is more data Client will need then to pass it to the server to get more results
     */
    continuationToken: string;
}

export enum UserState {
    Wellformed = 0,
    PendingProfileCreation = 1,
    Deleted = 2
}

export var TypeInfo = {
    AccessedHost: <any>{
    },
    AccessedHostsParameters: <any>{
    },
    Avatar: <any>{
    },
    AvatarSize: {
        enumValues: {
            "small": 0,
            "medium": 1,
            "large": 2
        }
    },
    SetUserAttributeParameters: <any>{
    },
    User: <any>{
    },
    UserAttribute: <any>{
    },
    UserAttributes: <any>{
    },
    UserState: {
        enumValues: {
            "wellformed": 0,
            "pendingProfileCreation": 1,
            "deleted": 2
        }
    },
};

TypeInfo.AccessedHost.fields = {
    accessTime: {
        isDate: true,
    }
};

TypeInfo.AccessedHostsParameters.fields = {
    accessedHosts: {
        isArray: true,
        typeInfo: TypeInfo.AccessedHost
    }
};

TypeInfo.Avatar.fields = {
    lastModified: {
        isDate: true,
    },
    size: {
        enumType: TypeInfo.AvatarSize
    }
};

TypeInfo.SetUserAttributeParameters.fields = {
    lastModified: {
        isDate: true,
    }
};

TypeInfo.User.fields = {
    dateCreated: {
        isDate: true,
    },
    lastModified: {
        isDate: true,
    },
    state: {
        enumType: TypeInfo.UserState
    }
};

TypeInfo.UserAttribute.fields = {
    lastModified: {
        isDate: true,
    }
};

TypeInfo.UserAttributes.fields = {
    attributes: {
        isArray: true,
        typeInfo: TypeInfo.UserAttribute
    }
};
