/**
 * ---------------------------------------------------------
 * Generated file, DO NOT EDIT
 * ---------------------------------------------------------
 *
 * See following wiki page for instructions on how to regenerate:
 *   https://aka.ms/azure-devops-client-generation
 *
 * Configuration file:
 *   vssf\client\webapi\httpclients\clientgeneratorconfigs\profile.genclient.json
 */

"use strict";

export interface AttributeDescriptor {
    attributeName: string;
    containerName: string;
}

export interface AttributesContainer {
    attributes: { [key: string] : ProfileAttribute; };
    containerName: string;
    revision: number;
}

export interface Avatar {
    isAutoGenerated: boolean;
    size: AvatarSize;
    timeStamp: Date;
    value: number[];
}

/**
 * Small = 34 x 34 pixels; Medium = 44 x 44 pixels; Large = 220 x 220 pixels
 */
export enum AvatarSize {
    Small = 0,
    Medium = 1,
    Large = 2
}

export interface CoreProfileAttribute extends ProfileAttributeBase<any> {
}

export interface CreateProfileContext {
    cIData: { [key: string] : any; };
    contactWithOffers: boolean;
    countryName: string;
    displayName: string;
    emailAddress: string;
    hasAccount: boolean;
    language: string;
    phoneNumber: string;
    profileState: ProfileState;
}

export interface GeoRegion {
    regionCode: string;
}

export interface Profile {
    applicationContainer: AttributesContainer;
    coreAttributes: { [key: string] : CoreProfileAttribute; };
    coreRevision: number;
    id: string;
    profileState: ProfileState;
    revision: number;
    timeStamp: Date;
}

export interface ProfileAttribute extends ProfileAttributeBase<string> {
}

export interface ProfileAttributeBase<T> {
    descriptor: AttributeDescriptor;
    revision: number;
    timeStamp: Date;
    value: T;
}

/**
 * Country/region information
 */
export interface ProfileRegion {
    /**
     * The two-letter code defined in ISO 3166 for the country/region.
     */
    code: string;
    /**
     * Localized country/region name
     */
    name: string;
}

/**
 * Container of country/region information
 */
export interface ProfileRegions {
    /**
     * List of country/region code with contact consent requirement type of notice
     */
    noticeContactConsentRequirementRegions: string[];
    /**
     * List of country/region code with contact consent requirement type of opt-out
     */
    optOutContactConsentRequirementRegions: string[];
    /**
     * List of country/regions
     */
    regions: ProfileRegion[];
}

export enum ProfileState {
    Custom = 0,
    CustomReadOnly = 1,
    ReadOnly = 2
}

export interface RemoteProfile {
    avatar: number[];
    countryCode: string;
    displayName: string;
    /**
     * Primary contact email from from MSA/AAD
     */
    emailAddress: string;
}

export var TypeInfo = {
    AttributesContainer: <any>{
    },
    Avatar: <any>{
    },
    AvatarSize: {
        enumValues: {
            "small": 0,
            "medium": 1,
            "large": 2
        }
    },
    CoreProfileAttribute: <any>{
    },
    CreateProfileContext: <any>{
    },
    Profile: <any>{
    },
    ProfileAttribute: <any>{
    },
    ProfileAttributeBase: <any>{
    },
    ProfileState: {
        enumValues: {
            "custom": 0,
            "customReadOnly": 1,
            "readOnly": 2
        }
    },
};

TypeInfo.AttributesContainer.fields = {
    attributes: {
        isDictionary: true,
        dictionaryValueTypeInfo: TypeInfo.ProfileAttribute
    }
};

TypeInfo.Avatar.fields = {
    size: {
        enumType: TypeInfo.AvatarSize
    },
    timeStamp: {
        isDate: true,
    }
};

TypeInfo.CoreProfileAttribute.fields = {
    timeStamp: {
        isDate: true,
    }
};

TypeInfo.CreateProfileContext.fields = {
    profileState: {
        enumType: TypeInfo.ProfileState
    }
};

TypeInfo.Profile.fields = {
    applicationContainer: {
        typeInfo: TypeInfo.AttributesContainer
    },
    coreAttributes: {
        isDictionary: true,
        dictionaryValueTypeInfo: TypeInfo.CoreProfileAttribute
    },
    profileState: {
        enumType: TypeInfo.ProfileState
    },
    timeStamp: {
        isDate: true,
    }
};

TypeInfo.ProfileAttribute.fields = {
    timeStamp: {
        isDate: true,
    }
};

TypeInfo.ProfileAttributeBase.fields = {
    timeStamp: {
        isDate: true,
    }
};
