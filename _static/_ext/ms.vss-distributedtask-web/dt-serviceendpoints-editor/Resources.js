// Copyright (C) Microsoft Corporation. All rights reserved.
define("DistributedTaskUI/ServiceEndpoints/Editor/Resources", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ChoosingConnectionTypeHelpText = "Need help choosing a connection type?";
    exports.CreatePanelTitle = "New {0} service connection";
    exports.LearnMoreText = "Learn more";
    exports.ChooseAzureRMSchemeTitle = "New Azure service connection";
    exports.ChooseAzureRMSchemeHeading = "Azure Resource Manager";
    exports.NoAuthSchemeFound = "No auth scheme found";
    exports.CreateAzureRMServicePrincipalAutomaticHeading = "Azure Resource Manager using service principal (automatic)";
    exports.CreateAzureRMServicePrincipalManualHeading = "Azure Resource Manager using service principal (manual)";
    exports.CreateAzureRMManagedIdentityHeading = "Azure Resource Manager using managed identity";
    exports.RecommendedText = "Recommended";
    exports.EditPanelTitle = "Edit service connection";
    exports.SelectEndpointTypesPanelTitle = "New service connection";
    exports.LoadingSpinnerLabel = "Verifying...";
    exports.SavingSpinnerLabel = "Saving...";
    exports.FetchingServiceEndpointTypes = "Fetching service connection types";
    exports.SelectEndpointTypeText = "Choose a service or connection type";
    exports.SelectAuthSchemeText = "Choose an authentication type";
    exports.SearchEndpointTypePlaceholderText = "Search connection types";
    exports.BackButtonText = "Back";
    exports.VerifyAndSaveText = "Verify and save";
    exports.SaveText = "Save without verification";
    exports.SaveServiceConnection = "Save";
    exports.NextText = "Next";
    exports.SaveEndpointErrorMessage = "An error occurred while saving the service connection.";
    exports.ValidateEndpointErrorMessage = "An error occurred while validating the authentication.";
    exports.AuthenticationPickerHeader = "Authentication method";
    exports.ServerURLText = "Server URL";
    exports.InvalidServerURLMessage = "Your server URL must be a valid URL";
    exports.AuthenticationHeader = "Authentication";
    exports.NameInputLabel = "Service connection name";
    exports.DescriptionInputLabel = "Description (optional)";
    exports.DetailsHeader = "Details";
    exports.SecurityHeader = "Security";
    exports.PipelinePermissionsCheckboxLabel = "Grant access permission to all pipelines";
    exports.InvalidInput = "Invalid input";
    exports.InvalidBooleanInput = "Invalid boolean input";
    exports.InvalidGuidInput = "Invalid GUID input";
    exports.InvalidNumberInput = "Invalid number input";
    exports.InvalidUriInput = "Invalid URL input";
    exports.OptionalInputSuffix = " (optional)";
    exports.KubeConfigCopyPasteText = "Copy and paste the contents of your KubeConfig file";
    exports.CommandMessageServerUrl = "Run {0} in your local shell to get server url";
    exports.CommandMessageToken = "Run {0} in your local shell to get token";
    exports.CommandMessageCertificate = "Run {0} in your local shell to get certificate";
    exports.CopyCommand = "CopyCommand";
    exports.KubeConfigParsingFailed = "Failed to parse KubeConfig {0}";
    exports.ServiceAccountSecretParsingFailed = "Failed to parse Service Account secret {0}";
    exports.AcceptUntrustedCert = "Accept untrusted certificates";
    exports.ServiceAccount = "Service Account";
    exports.Certificate = "Certificate";
    exports.Token = "Token";
    exports.ServerUrl = "Server Url";
    exports.ClusterContext = "Cluster context (optional)";
    exports.Cluster = "Cluster";
    exports.KubeConfig = "KubeConfig";
    exports.LoadingClusters = "Loading clusters";
    exports.NoClustersMessage = "No clusters found";
    exports.Namespace = "Namespace";
    exports.LoadingNamespaces = "Loading namespaces";
    exports.NoNamespacesMessage = "No namespaces found";
    exports.AzureSubscription = "Azure Subscription";
    exports.Cancel = "Cancel";
    exports.CreateText = "Create";
    exports.GitHubAuthorizeText = "Authorize on GitHub";
    exports.GitHubChangeText = "Change";
    exports.CouldNotCompleteOAuth2 = "Could not complete OAuth2 Authorization";
    exports.SavingAuthorizationLabel = "Authorizing...";
    exports.Authorization = "Authorization";
    exports.KubernetesKubeConfigFieldNotPresent = "The Kubconfig does not contain \u0027{0}\u0027 field. Please check the kubeconfig.";
    exports.KubernetesInvalidKubeConfig = "The Kubconfig specified is invalid. Please check your Kubeconfig.";
    exports.KubernetesCouldNotObtainClusterUrl = "Could not obtain cluster URL from cluster properties. Unable to find property - fqdn";
    exports.KuberntesInvalidServiceAccountSecretYaml = "The service account secret yaml specified is invalid. Make sure that its a valid yaml and try again.";
    exports.KubernetesServiceAccountSecretFieldNotPresent = "The service acount secret yaml does not contain \u0027{0}\u0027 field. Make sure that its present and try again.";
    exports.KubernetesServiceAccountSecretYaml = "Secret";
    exports.ServiceAccountSecretSuggestionHeading = "Run following sequential commands to get the secret value:";
    exports.ServiceAccountSuggestionFormat = "1. Get service account secret names by running {0}";
    exports.ServiceAccountSecretSuggestionFormat = "2. Use the output in {0}";
    exports.Environment = "Environment";
    exports.ScopeLevel = "Scope level";
    exports.Subscription = "Subscription";
    exports.ManagementGroup = "Management Group";
    exports.MachineLearningWorkspace = "Machine Learning Workspace";
    exports.LoadingMachineLearningWorkspaces = "Loading ML workspaces";
    exports.NoMachineLearningWorkspaceMessage = "No ML workspace found";
    exports.ServicePrincipalKey = "Service principal key";
    exports.AzureCloud = "Azure Cloud";
    exports.AzureChinaCloud = "Azure China Cloud";
    exports.AzureUSGovernment = "Azure US Government";
    exports.AzureGermanCloud = "Azure German Cloud";
    exports.ResourceGroup = "Resource group";
    exports.LoadingResourceGroups = "Loading resource groups";
    exports.NoResourceGroupMessage = "No resource group found";
    exports.SubscriptionId = "Subscription ID";
    exports.SubscriptionName = "Subscription Name";
    exports.ManagementGroupId = "Management Group ID";
    exports.ManagementGroupName = "Management Group Name";
    exports.LoadingManagementGroups = "Loading management groups";
    exports.NoManagementGroupMessage = "No management group found";
    exports.ServicePrincipalClientId = "Service principal client ID";
    exports.Credential = "Credential";
    exports.tenantId = "Tenant ID";
    exports.AzureRMServicePrincipalAutomaticScheme = "Service principal (automatic)";
    exports.AzureRMServicePrincipalManualScheme = "Service principal (manual)";
    exports.AzureRMServicePrincipalManagedIdentityScheme = "Managed identity";
});